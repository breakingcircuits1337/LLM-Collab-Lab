'use server';

/**
 * @fileOverview The initial idea initiation flow.
 *
 * - initialIdeaInitiation - A function that handles the initial idea initiation process.
 * - InitialIdeaInitiationInput - The input type for the initialIdeaInitiation function.
 * - InitialIdeaInitiationOutput - The return type for the initialIdeaInitiation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const InitialIdeaInitiationInputSchema = z.object({
  initialIdea: z.string().describe('The initial idea or prompt from the user.'),
});
export type InitialIdeaInitiationInput = z.infer<typeof InitialIdeaInitiationInputSchema>;

const InitialIdeaInitiationOutputSchema = z.object({
  refinedIdea: z.string().describe('The refined idea generated by the LLM.'),
});
export type InitialIdeaInitiationOutput = z.infer<typeof InitialIdeaInitiationOutputSchema>;

export async function initialIdeaInitiation(input: InitialIdeaInitiationInput): Promise<InitialIdeaInitiationOutput> {
  return initialIdeaInitiationFlow(input);
}

const initialIdeaInitiationPrompt = ai.definePrompt({
  name: 'initialIdeaInitiationPrompt',
  input: {schema: InitialIdeaInitiationInputSchema},
  output: {schema: InitialIdeaInitiationOutputSchema},
  prompt: `Refine the following idea:

{{{initialIdea}}}`, 
});

const initialIdeaInitiationFlow = ai.defineFlow(
  {
    name: 'initialIdeaInitiationFlow',
    inputSchema: InitialIdeaInitiationInputSchema,
    outputSchema: InitialIdeaInitiationOutputSchema,
  },
  async input => {
    const {output} = await initialIdeaInitiationPrompt(input);
    return output!;
  }
);
